{"ast":null,"code":"import _classCallCheck from\"/Users/abdussamad/Documents/Projects/Mosque-Screens/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/abdussamad/Documents/Projects/Mosque-Screens/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import moment from'moment';import config from'../../config.json';import csvtojson from'csvtojson';import request from'request';var AppConfig=/*#__PURE__*/function(){function AppConfig(){_classCallCheck(this,AppConfig);this.updateData();}_createClass(AppConfig,[{key:\"get\",value:function get(){var key=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;if(!key)return null;var data=this.getAppConfig();return data?data[key]:'';}},{key:\"getSpeadsheetUrl\",value:function getSpeadsheetUrl(){return process.env.REACT_APP_APP_CONFIG_SPREADSHEET_URL?process.env.REACT_APP_APP_CONFIG_SPREADSHEET_URL:config.googleSheets.appConfig;}},{key:\"getAppConfigFromGoogleSheets\",value:function getAppConfigFromGoogleSheets(){var _this=this;var spreadsheetUrl=this.getSpeadsheetUrl();if(!spreadsheetUrl){alert('CSV not set');}return csvtojson().fromStream(request.get(\"\".concat(spreadsheetUrl,\"&_cacheBust=\").concat(Math.random()))).then(function(json){_this.storeAppConfig(json);});}},{key:\"storeAppConfig\",value:function storeAppConfig(){var _appConfig=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var formatted_data={};_appConfig.forEach(function(conf){formatted_data[conf.Key]=conf.Value;});window.localStorage.setItem('appConfig',JSON.stringify(formatted_data));window.localStorage.setItem('appConfig_lastUpdated',moment().unix());}},{key:\"getAppConfig\",value:function getAppConfig(){var _appConfig=window.localStorage.getItem('appConfig');return _appConfig?JSON.parse(_appConfig):null;}},{key:\"getLastUpdatedTime\",value:function getLastUpdatedTime(){return window.localStorage.getItem('appConfig_lastUpdated');}},{key:\"updateData\",value:function updateData(){var lastUpdatedDiff=moment().unix()-parseInt(this.getLastUpdatedTime());if(lastUpdatedDiff>config.googleSheets.refreshRate*60||!this.getAppConfig()){this.getAppConfigFromGoogleSheets();console.info('Updating App Config....');}}}]);return AppConfig;}();export default AppConfig;","map":{"version":3,"sources":["/Users/abdussamad/Documents/Projects/Mosque-Screens/src/_components/app-config/app-config.js"],"names":["moment","config","csvtojson","request","AppConfig","updateData","key","data","getAppConfig","process","env","REACT_APP_APP_CONFIG_SPREADSHEET_URL","googleSheets","appConfig","spreadsheetUrl","getSpeadsheetUrl","alert","fromStream","get","Math","random","then","json","storeAppConfig","_appConfig","formatted_data","forEach","conf","Key","Value","window","localStorage","setItem","JSON","stringify","unix","getItem","parse","lastUpdatedDiff","parseInt","getLastUpdatedTime","refreshRate","getAppConfigFromGoogleSheets","console","info"],"mappings":"kVAAA,MAAOA,CAAAA,MAAP,KAAmB,QAAnB,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CACA,MAAOC,CAAAA,SAAP,KAAsB,WAAtB,CACA,MAAOC,CAAAA,OAAP,KAAoB,SAApB,C,GAEMC,CAAAA,S,yBACJ,oBAAc,iCACZ,KAAKC,UAAL,GACD,C,uDAEe,IAAZC,CAAAA,GAAY,2DAAN,IAAM,CACd,GAAI,CAACA,GAAL,CAAU,MAAO,KAAP,CACV,GAAIC,CAAAA,IAAI,CAAG,KAAKC,YAAL,EAAX,CACA,MAAOD,CAAAA,IAAI,CAAGA,IAAI,CAACD,GAAD,CAAP,CAAe,EAA1B,CACD,C,2DAEkB,CACjB,MAAOG,CAAAA,OAAO,CAACC,GAAR,CAAYC,oCAAZ,CACHF,OAAO,CAACC,GAAR,CAAYC,oCADT,CAEHV,MAAM,CAACW,YAAP,CAAoBC,SAFxB,CAGD,C,mFAE8B,gBAC7B,GAAIC,CAAAA,cAAc,CAAG,KAAKC,gBAAL,EAArB,CAEA,GAAI,CAACD,cAAL,CAAqB,CACnBE,KAAK,CAAC,aAAD,CAAL,CACD,CAED,MAAOd,CAAAA,SAAS,GACbe,UADI,CACOd,OAAO,CAACe,GAAR,WAAeJ,cAAf,wBAA4CK,IAAI,CAACC,MAAL,EAA5C,EADP,EAEJC,IAFI,CAEC,SAAAC,IAAI,CAAI,CACZ,KAAI,CAACC,cAAL,CAAoBD,IAApB,EACD,CAJI,CAAP,CAKD,C,uDAE+B,IAAjBE,CAAAA,UAAiB,2DAAJ,EAAI,CAC9B,GAAIC,CAAAA,cAAc,CAAG,EAArB,CACAD,UAAU,CAACE,OAAX,CAAmB,SAAAC,IAAI,CAAI,CACzBF,cAAc,CAACE,IAAI,CAACC,GAAN,CAAd,CAA2BD,IAAI,CAACE,KAAhC,CACD,CAFD,EAGAC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,WAA5B,CAAyCC,IAAI,CAACC,SAAL,CAAeT,cAAf,CAAzC,EACAK,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,uBAA5B,CAAqDhC,MAAM,GAAGmC,IAAT,EAArD,EACD,C,mDAEc,CACb,GAAIX,CAAAA,UAAU,CAAGM,MAAM,CAACC,YAAP,CAAoBK,OAApB,CAA4B,WAA5B,CAAjB,CACA,MAAOZ,CAAAA,UAAU,CAAGS,IAAI,CAACI,KAAL,CAAWb,UAAX,CAAH,CAA4B,IAA7C,CACD,C,+DAEoB,CACnB,MAAOM,CAAAA,MAAM,CAACC,YAAP,CAAoBK,OAApB,CAA4B,uBAA5B,CAAP,CACD,C,+CAEY,CACX,GAAIE,CAAAA,eAAe,CAAGtC,MAAM,GAAGmC,IAAT,GAAkBI,QAAQ,CAAC,KAAKC,kBAAL,EAAD,CAAhD,CACA,GACEF,eAAe,CAAGrC,MAAM,CAACW,YAAP,CAAoB6B,WAApB,CAAkC,EAApD,EACA,CAAC,KAAKjC,YAAL,EAFH,CAGE,CACA,KAAKkC,4BAAL,GACAC,OAAO,CAACC,IAAR,CAAa,yBAAb,EACD,CACF,C,yBAGH,cAAexC,CAAAA,SAAf","sourcesContent":["import moment from 'moment';\nimport config from '../../config.json';\nimport csvtojson from 'csvtojson';\nimport request from 'request';\n\nclass AppConfig {\n  constructor() {\n    this.updateData();\n  }\n\n  get(key = null) {\n    if (!key) return null;\n    var data = this.getAppConfig();\n    return data ? data[key] : '';\n  }\n\n  getSpeadsheetUrl() {\n    return process.env.REACT_APP_APP_CONFIG_SPREADSHEET_URL\n      ? process.env.REACT_APP_APP_CONFIG_SPREADSHEET_URL\n      : config.googleSheets.appConfig;\n  }\n\n  getAppConfigFromGoogleSheets() {\n    var spreadsheetUrl = this.getSpeadsheetUrl();\n\n    if (!spreadsheetUrl) {\n      alert('CSV not set');\n    }\n\n    return csvtojson()\n      .fromStream(request.get(`${spreadsheetUrl}&_cacheBust=${Math.random()}`))\n      .then(json => {\n        this.storeAppConfig(json);\n      });\n  }\n\n  storeAppConfig(_appConfig = []) {\n    var formatted_data = {};\n    _appConfig.forEach(conf => {\n      formatted_data[conf.Key] = conf.Value;\n    });\n    window.localStorage.setItem('appConfig', JSON.stringify(formatted_data));\n    window.localStorage.setItem('appConfig_lastUpdated', moment().unix());\n  }\n\n  getAppConfig() {\n    var _appConfig = window.localStorage.getItem('appConfig');\n    return _appConfig ? JSON.parse(_appConfig) : null;\n  }\n\n  getLastUpdatedTime() {\n    return window.localStorage.getItem('appConfig_lastUpdated');\n  }\n\n  updateData() {\n    var lastUpdatedDiff = moment().unix() - parseInt(this.getLastUpdatedTime());\n    if (\n      lastUpdatedDiff > config.googleSheets.refreshRate * 60 ||\n      !this.getAppConfig()\n    ) {\n      this.getAppConfigFromGoogleSheets();\n      console.info('Updating App Config....');\n    }\n  }\n}\n\nexport default AppConfig;\n"]},"metadata":{},"sourceType":"module"}